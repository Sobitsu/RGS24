// This file was automatically generated by udr2java.sh utility.
// ($Id: udr2java.sh,v 1.60 2015/07/17 05:29:18 black Exp $)
// Do not edit, please!

/**
 * Copyright (C) GRS24, Inc. 2014-2015.
 * All rights reserved.
 */

package com.grs24.msg;

import org.apache.log4j.Logger;
import com.grs24.core.Stickable;
import java.util.Date;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import org.springframework.roo.addon.json.annotations.RooJson;

@RooJson(deepSerialize = true, iso8601Dates = true)
public class CfgDataHolder implements Stickable {
    protected static Logger syslog = Logger.getLogger(CfgDataHolder.class.getName());

    private String sysID;
    private BigDecimal sysType;
    private String country;
    private String isActive;
    private LNameHolder[] lName;
    private String address;
    private String phone;
    private LimitTypeHolder tLimit;
    private SubjLimitTypeHolder[] sLimit;
    private LimitTypeHolder pLimit;
    private X509IssueSubjectHolder x509IssueSubject;
    private String password;
    private ParamTypeHolder[] params;

    public void setSysID(String SysID) {
        this.sysID = SysID;
    }

    public String getSysID() {
        return this.sysID;
    }

    public void setSysType(BigDecimal SysType) {
        this.sysType = SysType;
    }

    public BigDecimal getSysType() {
        return this.sysType;
    }

    public void setCountry(String Country) {
        this.country = Country;
    }

    public String getCountry() {
        return this.country;
    }

    public void setIsActive(String isActive) {
        this.isActive = isActive;
    }

    public String getIsActive() {
        return this.isActive;
    }

    public void setLName(LNameHolder[] LName) {
        this.lName = LName;
    }

    public LNameHolder[] getLName() {
        return this.lName;
    }

    public void setAddress(String Address) {
        this.address = Address;
    }

    public String getAddress() {
        return this.address;
    }

    public void setPhone(String Phone) {
        this.phone = Phone;
    }

    public String getPhone() {
        return this.phone;
    }

    public void setTLimit(LimitTypeHolder TLimit) {
        this.tLimit = TLimit;
    }

    public LimitTypeHolder getTLimit() {
        return this.tLimit;
    }

    public void setSLimit(SubjLimitTypeHolder[] SLimit) {
        this.sLimit = SLimit;
    }

    public SubjLimitTypeHolder[] getSLimit() {
        return this.sLimit;
    }

    public void setPLimit(LimitTypeHolder PLimit) {
        this.pLimit = PLimit;
    }

    public LimitTypeHolder getPLimit() {
        return this.pLimit;
    }

    public void setX509IssueSubject(X509IssueSubjectHolder X509IssueSubject) {
        this.x509IssueSubject = X509IssueSubject;
    }

    public X509IssueSubjectHolder getX509IssueSubject() {
        return this.x509IssueSubject;
    }

    public void setPassword(String Password) {
        this.password = Password;
    }

    public String getPassword() {
        return this.password;
    }

    public void setParams(ParamTypeHolder[] Params) {
        this.params = Params;
    }

    public ParamTypeHolder[] getParams() {
        return this.params;
    }

    public CfgDataHolder() {
    }

    public String toString() {
        StringBuffer str = new StringBuffer();
        str.append("CfgData(");
        str.append(" sysID=").append(getSysID());
        str.append(" sysType=").append(getSysType());
        str.append(" country=").append(getCountry());
        str.append(" isActive=").append(getIsActive());
        if ( getLName() != null )
            for (int i=0; i < getLName().length; i++) {
                str.append(" lName["+i+"]=").append(getLName()[i]);
            }
        str.append(" address=").append(getAddress());
        str.append(" phone=").append(getPhone());
        str.append(" tLimit=").append(getTLimit());
        if ( getSLimit() != null )
            for (int i=0; i < getSLimit().length; i++) {
                str.append(" sLimit["+i+"]=").append(getSLimit()[i]);
            }
        str.append(" pLimit=").append(getPLimit());
        str.append(" x509IssueSubject=").append(getX509IssueSubject());
        str.append(" password=").append(getPassword());
        if ( getParams() != null )
            for (int i=0; i < getParams().length; i++) {
                str.append(" params["+i+"]=").append(getParams()[i]);
            }
        str.append(")");
        return str.toString();
    }

    private String fmt(Object data) {
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        StringBuffer str = new StringBuffer();
	if (data == null) return null;
	if (data instanceof Date) 
		str.append(sdf.format((Date)data));
     else
		str.append( (data instanceof Stickable) ? ((Stickable)data).stickString() : data);
	return str.toString();
    }

    public String stickString() {
        StringBuffer str = new StringBuffer();
        str.append(fmt(getSysID()));
        str.append(fmt(getSysType()));
        str.append(fmt(getCountry()));
        str.append(fmt(getIsActive()));
        if ( getLName() != null )
            for (int i=0; i < getLName().length; i++) {
                str.append(fmt(getLName()[i]));
            }
        str.append(fmt(getAddress()));
        str.append(fmt(getPhone()));
        str.append(fmt(getTLimit()));
        if ( getSLimit() != null )
            for (int i=0; i < getSLimit().length; i++) {
                str.append(fmt(getSLimit()[i]));
            }
        str.append(fmt(getPLimit()));
        str.append(fmt(getX509IssueSubject()));
        str.append(fmt(getPassword()));
        if ( getParams() != null )
            for (int i=0; i < getParams().length; i++) {
                str.append(fmt(getParams()[i]));
            }
        return str.toString();
    }

}

