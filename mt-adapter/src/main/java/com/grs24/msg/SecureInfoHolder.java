// This file was automatically generated by udr2java.sh utility.
// ($Id: udr2java.sh,v 1.60 2015/07/17 05:29:18 black Exp $)
// Do not edit, please!

/**
 * Copyright (C) GRS24, Inc. 2014-2015.
 * All rights reserved.
 */

package com.grs24.msg;

import org.apache.log4j.Logger;
import com.grs24.core.Stickable;
import java.util.Date;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import org.springframework.roo.addon.json.annotations.RooJson;

@RooJson(deepSerialize = true, iso8601Dates = true)
public class SecureInfoHolder implements Stickable {
    protected static Logger syslog = Logger.getLogger(SecureInfoHolder.class.getName());

    private AuthenticationHolder authentication;
    private SecureAccessManagementHolder secureAccessManagement;
    private DataConfidentialityHolder dataConfidentiality;
    private DataIntegrityHolder dataIntegrity;
    private NonRepudationHolder nonRepudation;

    public void setAuthentication(AuthenticationHolder Authentication) {
        this.authentication = Authentication;
    }

    public AuthenticationHolder getAuthentication() {
        return this.authentication;
    }

    public void setSecureAccessManagement(SecureAccessManagementHolder SecureAccessManagement) {
        this.secureAccessManagement = SecureAccessManagement;
    }

    public SecureAccessManagementHolder getSecureAccessManagement() {
        return this.secureAccessManagement;
    }

    public void setDataConfidentiality(DataConfidentialityHolder DataConfidentiality) {
        this.dataConfidentiality = DataConfidentiality;
    }

    public DataConfidentialityHolder getDataConfidentiality() {
        return this.dataConfidentiality;
    }

    public void setDataIntegrity(DataIntegrityHolder DataIntegrity) {
        this.dataIntegrity = DataIntegrity;
    }

    public DataIntegrityHolder getDataIntegrity() {
        return this.dataIntegrity;
    }

    public void setNonRepudation(NonRepudationHolder NonRepudation) {
        this.nonRepudation = NonRepudation;
    }

    public NonRepudationHolder getNonRepudation() {
        return this.nonRepudation;
    }

    public SecureInfoHolder() {
    }

    public String toString() {
        StringBuffer str = new StringBuffer();
        str.append("SecureInfo(");
        str.append(" authentication=").append(getAuthentication());
        str.append(" secureAccessManagement=").append(getSecureAccessManagement());
        str.append(" dataConfidentiality=").append(getDataConfidentiality());
        str.append(" dataIntegrity=").append(getDataIntegrity());
        str.append(" nonRepudation=").append(getNonRepudation());
        str.append(")");
        return str.toString();
    }

    private String fmt(Object data) {
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        StringBuffer str = new StringBuffer();
	if (data == null) return null;
	if (data instanceof Date) 
		str.append(sdf.format((Date)data));
     else
		str.append( (data instanceof Stickable) ? ((Stickable)data).stickString() : data);
	return str.toString();
    }

    public String stickString() {
        StringBuffer str = new StringBuffer();
        str.append(fmt(getAuthentication()));
        str.append(fmt(getSecureAccessManagement()));
        str.append(fmt(getDataConfidentiality()));
        str.append(fmt(getDataIntegrity()));
        str.append(fmt(getNonRepudation()));
        return str.toString();
    }

}

